#include <stdio.h>
#include<stdlib.h>
void addition(int a[][10], int b[][10], int c[][10], int x, int y)
{
    int i, j;
    for (i=0;i<x;i++)
    {
        for (j=0;j<y;j++)
        {
            c[i][j] = a[i][j] + b[i][j];
        }
    }
}

void multiplication(int a[][10], int b[][10], int c[][10], int x1, int y1, int y2)
{
    int i, j, k;
    c[i][j] = 0;
    for (i=0;i<x1;i++)
    {
        for (j=0;j<y1;j++)
        {
            for (k=0;k<y2;k++)
            {
                c[i][j] += a[i][k] * b[k][j];
            }
        }
    }
}

int isSymmetric(int a[][10],int x,int y) {
    int i, j;
    for (i = 0; i < x; i++) {
        for (j = 0; j < y; j++) {
            if (a[i][j] != a[j][i]) {
                return 0;
            }
        }
    }
    return 1;
}

int principaldiagonalSum(int a[][10], int x, int y)
{
    int i,sum = 0;
    for (i = 0; i < x && i < y; i++) {
        sum += a[i][i];
    }
    return sum;
}

int NonPrincipalDiagonalSum(int a[][10], int x, int y)
{
    int i, j, sum = 0;
    for (i = 0, j = y - 1; i < x && j >= 0; i++, j--) {
        sum += a[i][j];
    }
    return sum;
}

void findRowSums(int a[][10], int x, int y, int rowSums[]) {
    int i, j;
    for (i = 0; i < x; i++) {
        rowSums[i] = 0;
        for (j = 0; j < y; j++) {
            rowSums[i] += a[i][j];
        }
    }
}

void findColumnSums(int a[][10], int x, int y, int colSums[]) {
    int i, j;
    for (j = 0; j < y; j++) {
        colSums[j] = 0;
        for (i = 0; i < x; i++) {
            colSums[j] += a[i][j];
        }
    }
}

void findMatrixTranspose(int a[][10], int x, int y, int transpose[][10])
{
    int i, j;
    for (i = 0; i < x; i++) {
        for (j = 0; j < y; j++) {
            transpose[j][i] = a[i][j];
        }
    }
}



int main() {
    int a[10][10], b[10][10], c[10][10];
    int x, y, x1, y1;

    printf("Enter the number of rows and columns for the first matrix: ");
    scanf("%d %d", &x1, &y1);

    printf("Enter the elements of the first matrix:\n");
    int i, j;
    for (i = 0; i < x1; i++) {
        for (j = 0; j < y1; j++) {
            scanf("%d",&a[i][j]);
        }
    }

    printf("Enter the number of rows and columns for the second matrix: ");
    scanf("%d %d", &x2, &y2);

    printf("Enter the elements of the second matrix:\n");
    for (i = 0; i < x2; i++) {
        for (j = 0; j < y2; j++) {
            scanf("%d", &b[i][j]);
        }
    }

   
    if (x1 == x2 && y1 == y2) {
        matrixAddition(a, b, c, x1, y1);
        printf("\nResult of matrix addition:\n");
        displayMatrix(c, x1, y1);
    } else {
        printf("\nMatrix addition is not possible. The matrices must have the same dimensions.\n");
    }

    if (y1 == x2) {
        matrixMultiplication(mat1, mat2, result, rows1, cols1, cols2);
        printf("\nResult of matrix multiplication:\n");
        displayMatrix(result, rows1, cols2);
    } else {
        printf("\nMatrix multiplication is not possible. The number of columns in the first matrix must be equal to the number of rows in the second matrix.\n");
    }

  
    printf("Checking if matrices are symmetric...\n");
    int isMat1Symmetric = isSymmetric(mat1, rows1, cols1);
    int isMat2Symmetric = isSymmetric(mat2, rows2, cols2);

    if (isMat1Symmetric)
        printf("\nMatrix 1 is symmetric.\n");
    else
        printf("\nMatrix 1 is not symmetric.\n");

    if (isMat2Symmetric)
        printf("\nMatrix 2 is symmetric.\n");
    else
        printf("\nMatrix 2 is not symmetric.\n");

    int principalDiagonalSum = findPrincipalDiagonalSum(a, x1, y1);
    int nonPrincipalDiagonalSum = findNonPrincipalDiagonalSum(a, x1, y1);

    printf("\nSum of principal diagonal of matrix 1: %d\n", principalDiagonalSum);
    printf("\nSum of non-principal diagonal of matrix 1: %d\n", nonPrincipalDiagonalSum);

   
    int rowSums[10], colSums[10];

    findRowSums(a, x1, y1, rowSums);
    printf("\nSum of every row of matrix 1:\n");
    for (i = 0; i < x1; i++) {
        printf("Row %d: %d\n", i + 1, rowSums[i]);
    }

    findColumnSums(a, x1, y1, colSums);
    printf("\nSum of every column of matrix 1:\n");
    for (j = 0; j < cols1; j++) {
        printf("Column %d: %d\n", j + 1, colSums[j]);
    }

   
    int transpose[10][10];
    findMatrixTranspose(a, x1, y1, transpose);
    printf("\nTranspose of matrix 1:\n");
    displayMatrix(transpose, y1, x1);

    return 0;
}
